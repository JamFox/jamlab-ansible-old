# HASHISTACK ALL

- name: Create hashistack dirs
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: "{{ item.mode|default('0700') }}"
    recurse: true
  loop:
  - { path: /etc/consul.d/, owner: consul }
  - { path: /opt/consul/, owner: consul }
  - { path: /etc/nomad.d/, owner: nomad }
  - { path: /opt/nomad/, owner: nomad }

- name: Create hashistack configs
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: "{{ item.mode|default('0640') }}"
  loop:
  - { src: consul.hcl.j2, dest: /etc/consul.d/consul.hcl, owner: consul }
  - { src: nomad.hcl.j2, dest: /etc/nomad.d/nomad.hcl, owner: nomad }

# HASHISTACK SERVER

- name: Configure Hashistack Server
  block:

  - name: Copy hashistack server files
    ansible.builtin.copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      mode: "{{ item.mode|default('0640') }}"
      owner: "{{ item.owner }}"
      group: "{{ item.owner }}"
    loop:
    - { src: consul-agent-ca.pem.enc, dest: /etc/consul.d/consul-agent-ca.pem, owner: consul }
    - { src: dc1-server-consul-0-key.pem.enc, dest: /etc/consul.d/dc1-server-consul-0-key.pem, owner: consul }
    - { src: dc1-server-consul-0.pem.enc, dest: /etc/consul.d/dc1-server-consul-0.pem, owner: consul }
    - { src: nomad-ca.pem.enc, dest: /etc/nomad.d/nomad-ca.pem, owner: nomad }
    - { src: nomad-server.pem.enc, dest: /etc/nomad.d/nomad-server.pem, owner: nomad }
    - { src: nomad-server-key.pem.enc, dest: /etc/nomad.d/nomad-server-key.pem, owner: nomad }


  when: (hashistack is defined) and (hashistack == "server")

# HASHISTACK CLIENT

- name: Configure Hashistack Client
  block:

  - name: Copy hashistack client files
    ansible.builtin.copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      mode: "{{ item.mode|default('0640') }}"
      owner: "{{ item.owner }}"
      group: "{{ item.owner }}"
    loop:
    - { src: consul-agent-ca.pem.enc, dest: /etc/consul.d/consul-agent-ca.pem, owner: consul }
    - { src: nomad-ca.pem.enc, dest: /etc/nomad.d/nomad-ca.pem, owner: nomad }
    - { src: nomad-client.pem.enc, dest: /etc/nomad.d/nomad-client.pem, owner: nomad }
    - { src: nomad-client-key.pem.enc, dest: /etc/nomad.d/nomad-client-key.pem, owner: nomad }

  # CNI 

  - name: Create cni bridge directory
    ansible.builtin.file:
      path: /proc/sys/net/bridge
      state: directory

  - name: Enable cni bridge files
    ansible.builtin.copy:
      dest: /etc/mine.conf
      content: '1'
    loop:
    - { dest: /proc/sys/net/bridge/bridge-nf-call-arptables }
    - { dest: /proc/sys/net/bridge/bridge-nf-call-ip6tables }
    - { dest: /proc/sys/net/bridge/bridge-nf-call-iptables }

  - name: Create cni.conf
    ansible.builtin.copy:
      dest: /etc/sysctl.d/cni.conf
      content: |
        net.bridge.bridge-nf-call-arptables = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1

  - name: Check if cni exists
    ansible.builtin.stat:
      path: /opt/cni/bin/bridge
    register: r_cni

  - name: Check if newer cni exists
    ansible.builtin.shell: |
      latest_tag=$(curl -s https://api.github.com/repos/containernetworking/plugins/releases/latest | jq -r ".tag_name")
      current_ver=$(/opt/cni/bin/bridge 2>&1 | cut -d " " -f 4)
      case "$current_ver" in ${latest_tag} ) echo "latest";; *) echo "outdated";; esac
    register: r_cni_ver
    when: r_cni.stat.exists

  - name: Get latest cni
    ansible.builtin.shell: |
      latest_tag=$(curl -s https://api.github.com/repos/containernetworking/plugins/releases/latest | jq -r ".tag_name")
      latest_url=https://github.com/containernetworking/plugins/releases/download/${latest_tag}/cni-plugins-linux-amd64-${latest_tag}.tgz
      wget -P /tmp $latest_url
      mkdir -p /opt/cni/bin
      tar -C /opt/cni/bin -xzf /tmp/"${latest_url##*/}"
      rm /tmp/"${latest_url##*/}"
    when: not r_cni.stat.exists or r_cni_ver.stdout != "latest"

  when: (hashistack is defined) and (hashistack == "client")

# HASHISTACK ALL CONTINUED

- name: Copy hashistack services
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: /etc/systemd/system/
  loop:
  - consul.service
  - nomad.service

- name: Enable and restart consul
  ansible.builtin.systemd:
    name: consul.service
    state: restarted
    enabled: true
    daemon_reload: true

- name: Enable and restart nomad
  ansible.builtin.systemd:
    name: nomad.service
    state: restarted
    enabled: true
    daemon_reload: true
