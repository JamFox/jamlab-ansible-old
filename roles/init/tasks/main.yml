# USER

- name: Configure defaults for root user
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
  - { src: .bashrc, dest: /root/.bashrc}
  - { src: .bash_profile, dest: /root/.bash_profile }
  - { src: .gitconfig, dest: /root/.gitconfig }
  - { src: .tmux.conf, dest: /root/.tmux.conf }

# SYSTEM

- name: Create setup dir
  ansible.builtin.file:
    path: /opt/jamlab-setup
    state: directory
    mode: "0700"

- name: Configure latest jamlab-ansible-update
  ansible.builtin.copy:
    src: jamlab-ansible-update
    dest: /usr/local/sbin/
    mode: "0755"

- name: Check whether systemd-journald is persistent
  ansible.builtin.stat:
    path: /var/log/journal
  register: r_journal

- name: Create persistent journal
  block:

  - name: Create journal directory
    ansible.builtin.file:
      path: /var/log/journal
      state: directory

  - name: Reload systemd-journald with new settings
    ansible.builtin.command: "{{ item }}"
    loop:
    - systemd-tmpfiles --create --prefix /var/log/journal
    - killall -USR1 systemd-journald

  when: not r_journal.stat.exists

- name: Get current hostname
  ansible.builtin.command: hostnamectl --static
  register: r_hostname
  changed_when: false

- name: Set hostname
  ansible.builtin.shell: "/usr/bin/hostnamectl set-hostname {{ ansible_fqdn }}"
  when: r_hostname.stdout != ansible_fqdn

- name: Configure daily ansible execution
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: /etc/systemd/system/
  loop:
  - daily-ansible.service
  - daily-ansible.timer

- name: Enable and start daily playbook timer
  ansible.builtin.systemd:
    name: daily-ansible.timer
    state: started
    enabled: true
    daemon_reload: true

- name: Configure wakeup service
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode|default('0644') }}"
  loop:
  - { src: wakeup.service, dest: /etc/systemd/system/ }
  - { src: wakeup.sh, dest: /etc/systemd/scripts/, mode: "0755" }

- name: Enable wakeup service
  ansible.builtin.systemd:
    name: wakeup.service
    enabled: true
    daemon_reload: true

# SECRETS

- name: Check if sops exists
  ansible.builtin.stat:
    path: /usr/local/bin/sops
  register: r_sops

- name: Check if newer sops exists
  ansible.builtin.shell: |
    latest_sops_url=$(curl -s https://api.github.com/repos/mozilla/sops/releases/latest | jq -r ".assets[] | select(.name | test(\"amd64.deb\")) | .browser_download_url" | cut -d "_" -f 2)
    current_sops_ver=$(/usr/local/bin/sops -v | cut -d " " -f 2)
    case "$current_sops_ver" in $latest_sops_url ) echo "latest";; *) echo "outdated";; esac
  register: r_sops_ver
  when: r_sops.stat.exists

- name: Get latest sops
  ansible.builtin.shell: |
    latest_sops_url=$(curl -s https://api.github.com/repos/mozilla/sops/releases/latest | jq -r ".assets[] | select(.name | test(\"amd64.deb\")) | .browser_download_url")
    wget -P /tmp $latest_sops_url
    apt install /tmp/"${latest_sops_url##*/}"
    rm /tmp/"${latest_sops_url##*/}"
  when: not r_sops.stat.exists or r_sops_ver.stdout != "latest"

- name: Configure sops
  ansible.builtin.copy:
    src: .sops.yaml
    dest: /root/.sops.yaml

- name: Check for pgp key
  ansible.builtin.stat:
    path: /root/.pgp/private.key
  register: r_pgp_keys

- name: Set pgp keys
  block:

  - name: Create pgp dir
    ansible.builtin.file:
      path: /root/.pgp
      state: directory
      mode: "0700"

  - name: Copy pgp keys
    ansible.builtin.copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      mode: "{{ item.mode|default('0600') }}"
    loop:
    - { src: private.key.enc, dest: /root/.pgp/private.key, mode: "0600" }
    - { src: public.key.enc, dest: /root/.pgp/public.key, mode: "0644" }

  - name: Import pgp keys to gpg
    ansible.builtin.shell: |
      gpg --import /root/.pgp/private.key
      gpg --import /root/.pgp/public.key

  when: not r_pgp_keys.stat.exists
