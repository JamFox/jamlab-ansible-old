# SECRETS

- name: Check if sops exists
  ansible.builtin.stat:
    path: /usr/local/bin/sops
  register: r_sops

- name: Check if newer sops exists
  ansible.builtin.shell: |
    latest_sops_tag=$(curl -s https://api.github.com/repos/mozilla/sops/releases/latest | jq -r ".tag_name")
    current_sops_ver=$(/usr/local/bin/sops -v | cut -d " " -f 2)
    case "$current_sops_ver" in ${latest_sops_tag#v} ) echo "latest";; *) echo "outdated";; esac
  register: r_sops_ver
  when: r_sops.stat.exists

- name: Get latest sops
  ansible.builtin.shell: |
    latest_sops_url=$(curl -s https://api.github.com/repos/mozilla/sops/releases/latest | jq -r ".assets[] | select(.name | test(\"amd64.deb\")) | .browser_download_url")
    wget -P /tmp $latest_sops_url
    apt install /tmp/"${latest_sops_url##*/}"
    rm /tmp/"${latest_sops_url##*/}"
  when: not r_sops.stat.exists or r_sops_ver.stdout != "latest"

# ROOT

- name: Copy defaults for root user
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
  - { src: .bashrc, dest: /root/.bashrc}
  - { src: .bash_profile, dest: /root/.bash_profile }
  - { src: .gitconfig, dest: /root/.gitconfig }
  - { src: .tmux.conf, dest: /root/.tmux.conf }

- name: Check for pgp key
  ansible.builtin.stat:
    path: /root/.pgp/private.key
  register: r_pgp_keys

- name: Set pgp keys
  block:

  - name: Create pgp dir
    ansible.builtin.file:
      path: /root/.pgp
      state: directory
      mode: "0700"

  - name: Copy pgp keys
    ansible.builtin.copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      mode: "{{ item.mode|default('0600') }}"
    loop:
    - { src: private.key.enc, dest: /root/.pgp/private.key, mode: "0600" }
    - { src: public.key.enc, dest: /root/.pgp/public.key, mode: "0644" }
    no_log: true

  - name: Import pgp keys to gpg
    ansible.builtin.shell: |
      gpg --import /root/.pgp/private.key
      gpg --import /root/.pgp/public.key
    no_log: true

  when: not r_pgp_keys.stat.exists

- name: Copy sops config for root
  ansible.builtin.copy:
    src: .sops.yaml
    dest: /root/.sops.yaml

# SUDO

- name: Set up sudo group if defined
  block:

  - name: Ensure sudo_group exists
    ansible.builtin.group:
      name: "{{ sudo_group }}"
      state: present

  - name: Allow sudo_group to have passwordless sudo
    ansible.builtin.lineinfile:
      path: /etc/sudoers
      state: present
      regexp: '^%{{ sudo_group }}'
      line: '%{{ sudo_group }} ALL=(ALL) NOPASSWD: ALL'
      validate: '/usr/sbin/visudo -cf %s'

  when: sudo_group is defined

# ADMIN

- name: Set up admin account if defined
  block:
 
  - name: Create admin user(s)
    ansible.builtin.user:
      name: "{{ admin_username }}"
      password: "{{ admin_password | string | password_hash('sha512') }}"
      groups: 
        - "{{ sudo_group }}"
        - users
      state: present
    no_log: true

  - name: Set the default shell
    ansible.builtin.user:
      name: "{{ admin_username }}"
      shell: "{{ default_shell }}"

  - name: Ensure group for admin user(s) exists
    ansible.builtin.group:
      name: "{{ admin_username }}"
      state: present

  - name: Chmod the admin home directories
    ansible.builtin.file:
      path: "/home/{{ admin_username }}"
      state: directory
      mode: 0755
      owner: "{{ admin_username }}"
      group: "{{ admin_username }}"
      recurse: yes

  - name: Copy .bash_profile for admin user(s)
    ansible.builtin.copy:
      src: .bash_profile
      dest: "/home/{{ admin_username }}/.bash_profile"

  - name: Copy .bashrc for admin user(s)
    ansible.builtin.copy:
      src: .bashrc
      dest: "/home/{{ admin_username }}/.bashrc"

  - name: Copy .gitconfig for admin user(s)
    ansible.builtin.copy:
      src: .gitconfig
      dest: "/home/{{ admin_username }}/.gitconfig"

  - name: Copy .tmux.conf for admin user(s)
    ansible.builtin.copy:
      src: .tmux.conf
      dest: "/home/{{ admin_username }}/.tmux.conf"

  when: (admin_username is defined) and (admin_password is defined)
