#!/bin/bash
# Managed by jamlab-ansible
# Name:     ansible-pull
# Purpose:  Run ansible playbooks in pull mode to configure host

# Color codes
COLOR_RED_BOLD='\e[31;1m'
COLOR_YELLOW_BOLD='\e[33;1m'
COLOR_GREEN_BOLD='\e[32;1m'
COLOR_RESET='\e[00m'

# Global variables
exec_path=$(pwd)
host_name=$(hostname -s)
ANSIBLE_REPO_URL=https://github.com/JamFox/jamlab-ansible.git
ANSIBLE_MAIN_DIR=/opt/jamlab-ansible
DEFAULT_BRANCH=main
ANSIBLE_EXEC_NAME=jamlab-ansible
ANSIBLE_EXEC_DEST=/usr/local/sbin

# Check user
if [[ $(id -un) != root ]]
then
    echo -e "[ ${COLOR_RED_BOLD}FATAL${COLOR_RESET} ] Only root may run this script" >&2
    exit 1
fi

# Check OS
if [[ -e /etc/os-release ]]
then
    source /etc/os-release
    [[ $ID == debian ]] && os=debian
else
    echo -e "[ ${COLOR_RED_BOLD}FATAL${COLOR_RESET} ] Unable to read /etc/os-release" >&2
    exit 1
fi
if [[ -z $os ]]
then
    echo -e "[ ${COLOR_RED_BOLD}FATAL${COLOR_RESET} ] $0 may only run on debian" >&2
    exit 1
fi

# Check that there is no other running instance of this script
script_name=$(basename $0)
if [[ $(pidof -x $script_name) != $$ ]]
then
    echo -e "[ ${COLOR_YELLOW_BOLD}WARNING${COLOR_RESET} ] $script_name is already running" >&2
    exit 2
fi

# Manage arguments
host_name=$(hostname -s)
while [[ -n $1 ]]
do
    case $1 in
    (-b)
        shift
        branch=$1
    ;;
    (-r)
        refresh=true
    ;;
    (*)
        ansible_arg_list="$ansible_arg_list $1"
    ;;
    esac
    shift
done
# Set default branch if not specified
branch=${branch:=$DEFAULT_BRANCH}

# Determine execution directory
if [[ -e $exec_path/ansible.cfg ]]
then
    ansible_path=$exec_path
elif [[ -e $ANSIBLE_MAIN_DIR/ansible.cfg ]]
then
    ansible_path=$ANSIBLE_MAIN_DIR
else
    echo -e "[ ${COLOR_RED_BOLD}FATAL${COLOR_RESET} ] Unable to find ansible.cfg from current directory or $ANSIBLE_MAIN_DIR" >&2
    exit 1
fi
echo -e "[ ${COLOR_GREEN_BOLD}INFO${COLOR_RESET} ] Executing path $ansible_path"

# Clone if not exist yet
if [ ! -d $ansible_path ]
then
    git clone $ANSIBLE_REPO_URL $ansible_path
    if [ $? -ne 0 ]; then
        echo -e "[ ${COLOR_RED_BOLD}FATAL${COLOR_RESET} ] Unable to clone $ANSIBLE_REPO_URL" >&2
        exit 1
    fi
fi

# Checkout default or specified branch
cd $ansible_path
git checkout $branch
if [ $? -ne 0 ]; then
    echo -e "[ ${COLOR_RED_BOLD}FATAL${COLOR_RESET} ] Unable to checkout branch $branch at $ANSIBLE_REPO_URL" >&2
    exit 1
fi

# Pull latest if argument set
if [[ $refresh == true ]]
then
    git pull
    if [ $? -ne 0 ]; then
        echo -e "[ ${COLOR_YELLOW_BOLD}WARNING${COLOR_RESET} ] Unable to pull latest branch $branch at $ANSIBLE_REPO_URL"
        echo -e "[ ${COLOR_YELLOW_BOLD}WARNING${COLOR_RESET} ] Continuing without pulling latest..."
    fi
fi

# Display last commit
echo -e "[ ${COLOR_GREEN_BOLD}INFO${COLOR_RESET}  ] Last commit: $(git log -1)"

# Build default playbook list if none provided
if [[ -z $playbook_list ]]
then
    prefix=group_
    groups_json=$(ansible -i $ansible_path/hosts -m debug -a "var=group_names" -o $host_name)
    if [ "${group_names_json}" == "No hosts matched" ]
    then
        echo -e "[ ${COLOR_YELLOW_BOLD}WARNING${COLOR_RESET} ] No host group found"
    else
        groups_json=${groups_json#*> }
        jq_filter=".group_names | sort"
        host_groups=$(echo "${groups_json}" | jq "${jq_filter}" | jq -r ".[]")
    fi
    playbook_list+=$prefix$host_groups
    prefix=host_
    playbook_list+=$'\n'$prefix$host_name
fi

# Build list of playbooks that actually exist
for playbook in $playbook_list
do
    playbook_path=$ansible_path/playbooks/$playbook/local.yml
    if [[ -f $playbook_path ]]
    then
        playbook_path_list+=$playbook_path$'\n'
    fi
done

# If no playbooks found
if [[ -z $playbook_path_list ]]
then
    echo -e "[ ${COLOR_YELLOW_BOLD}WARNING${COLOR_RESET} ] No playbooks found, nothing done"
    exit 2
fi

# Display playbooks to execute
echo -e "[ ${COLOR_GREEN_BOLD}INFO${COLOR_RESET} ] Playbooks to execute:"
for playbook_path in $playbook_path_list
do
    echo "    $(basename $playbook_path)"
done

# Run playbooks
export ANSIBLE_CONFIG="$ansible_path/ansible.cfg"
ansible-playbook \
    --extra-vars "ansible_python_interpreter=/usr/bin/python3" \
    -i $ansible_path/hosts \
    -l $host_name \
    -c local \
    $ansible_arg_list \
    $playbook_path_list

# Clean up Ansible's temporary files
rm -fr /tmp/ansible-local-*
rm -fr /tmp/ansible-remote-*
